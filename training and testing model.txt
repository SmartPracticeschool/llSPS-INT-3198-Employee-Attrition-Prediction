#decision tree classifier

from sklearn.tree import DecisionTreeClassifier
dt=DecisionTreeClassifier(criterion='entropy',random_state=0)
dt.fit(x_train,y_train)
y_pred=dt.predict(x_test)
y_pred
#random forest classifier

from sklearn.ensemble import RandomForestClassifier
rf=RandomForestClassifier(n_estimators=10,random_state=0,n_jobs=-1,criterion='entropy')
rf.fit(x_train,y_train)
y_pred=rf.predict(x_test)
y_pred
#naive bayes

from sklearn.naive_bayes import GaussianNB
from sklearn.pipeline import Pipeline
pipe=Pipeline([
     ('rescale',StandardScaler()),
     ('classifier',GaussianNB())
])
pipe.fit(x_train,y_train)
y_pred=pipe.predict(x_test)
y_pred

#KNN classifier

from sklearn.neighbors import KNeighborsClassifier
from sklearn.pipeline import Pipeline
pipe2=Pipeline([
     ('rescale',StandardScaler()),
     ('classifier',KNeighborsClassifier(n_neighbors=5,metric='minkowski',p=2))
])
pipe2.fit(x_train,y_train)
y_pred=pipe2.predict(x_test)
y_pred

#logistic regression

from sklearn.linear_model import LogisticRegression
pipe5=Pipeline([
         ('rescale4',StandardScaler()),
         ('classifier4',LogisticRegression())
])
pipe5.fit(x_train,y_train)
y_pred=pipe5.predict(x_test)
y_pred

#svm classifier
from sklearn.svm import SVC
from sklearn.preprocessing import StandardScaler
from sklearn.pipeline import Pipeline
pipe6=Pipeline([
          ('rescale',StandardScaler()),
          ('classifier',SVC(kernel='rbf'))
])
pipe6.fit(x_train,y_train)
y_pred=pipe6.predict(x_test)
y_pred
